새 프로젝트
- "ToyProject" > "toy" + web.xml(O)

1. 주제
	- 기본 업무 구현

2. 요구분석
	- 회원 관리
	- 게시판 구현(***)
	- 기타 등등

3. 페이지 구성(관계도)
	- toy.drawio
	
4. 화면 설계
	- 생략
	
5. 스토리보드
	- 생략
	
6. 데이터베이스
	- ERD
		
7. 스크립트
	- DDL, DML
	- 기초 데이터 / 더미 데이터
	- ToyProject > "script.sql"

8. 구현
	- "com.test.toy": 메인 패키지
		- "Index.jajva": 시작 페이지
		- "Template.java": 템플릿 페이지
		
	- "com.test.toy.user": 회원
		- "Resgister.java": 회원 가입
		- "Unresgister.java": 회원 탈퇴
		- "Login.java": 로그인
		- "Logout.java": 로그아웃
	
	- "com.test.toy.user.repository": DB(DAO)
		- "UserDAO.java"
		
	- "com.test.toy.user.model": DB(DTO)
		- "UserDTO.java"
	
	- 뷰(webapp > WEB-INF)
		- "views"
			- "index.jsp"
			- "template.jsp"
		- views > "user"
			- "register.jsp"
			- "unregister.jsp"
			- "login.jsp"
			- "logout.jsp"
			
	- 공통 요소 & 리소스
		- views > "inc"
					- "asset.jsp"
					- "header.jsp"
		- webapp > "asset"
						> "css"
							- "main.css"
						> "js"
							- "main.js"
						>" pic"
	
	- lib
		- ojdbc6.jar
		- util.jar
		- jstl-1.2.jar
		- cos.jar
		- json-simple.jar
		- lombok.jar

	- 패키지
		- "com.test.toy.filter"
			- "EncodingFilter.java"

	- 테스트 전용(업무와 무관)
		- "com.test.toy.test"
			- "DAOTest.java"
			
		- "com.test.toy.util"
			- "OutputUtil.java"




1010!!

	- 패키지
		- com.test.toy.board
			- List.java
			- View.java
			- Add.java
			- Edit.java
			- Del.java
	
		- com.test.toy.board.repository
			- BoardDAO.java
		- com.test.toy.board.model
			- BoardDTO.java
	
	- 뷰
		- views > board
					- list.jsp
					- view.jsp
					- add.jsp
					- edit.jsp
					- del.jsp

게시판 구현
1. CRUD
2. 인증/허가
	a. 목록보기, 상세보기 > 미인증(O), 인증(O)
	b. 글쓰기, 수정하기 , 삭제하기 > 미인증(X), 인증(O) > 방식 > 노출 제어
	c. 수정하기, 삭제하기 > 인증(O) > 본인만 가능
	d. 수정하기, 삭제하기 >  관리자(O)


게시판 검색

페이징
- rownum 구현


댓글
- com.test.toy.board > "AddComment.java"
					 > "ListComment.java"
					 > "DelComment.java"
					 > "EditComment.java"
					 
- com.test.toy.model > "CommentDTO.java"


HTML 태그 처리
- <tag> > &lt;tag&gt;

사용자 입력 데이터 > (가공 + 과정) > 데이터베이스 저장
- ***** 사용자 입력한 데이터는 수정없이 그대로 보관


[가공 시점]
1. 데이터베이스에 저장하기 전 > 가공 (X)
2. 출력하기(사용하기) 전 > 가공 (*)



댓글이 달린 게시물 삭제
1. 게시물 삭제 > 댓글 전부 삭제
2. 게시물 삭제 > 댓글 존재 > 게시물 삭제 거부



답변형 게시판
- thread, depth > 값을 계산하는 규칙

1. 새글 쓰기
	a. 현존하는 모든 게시물 중에서 가장 큰 thread 값을 찾아서 그 값에 +1000을 한 값을 새글의 thread 값으로 넣는다.
	b. 새글의 depth 값은 0을 넣는다.

2. 답변글 쓰기
	a. 현존하는 모든 게시물의 thread 값을 대상으로, 현재 작성 중인 답변글의 부모글 thread 값보다 작고, 이전 새글의 thread 값보다 큰 thread를 모두 찾아서 -1을 한다.
	b. 답변글의 thread 값은 부모글의 thread - 1 을 넣는다.
	c. 답변글의 depth 값을 부모글의 depth + 1 을 넣는다.
	
답변글이 달린 글의 삭제
1. 전부 지운다
2. 못 지운다.
3. 삭제한다. > update

첨부파일
1014
--사진 정보, 사진 다운로드
사진 정보 jar 파일 lib에 넣기


1015
해시태그




		