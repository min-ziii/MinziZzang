package com.test.java.file;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;

public class Ex54_File {
	
	private static int fileCount;
	private static int dirCount;
	private static long dirSize;
	
	public static void main(String[] args) {
		
		/*
		 * 
		 * 1. 파일/디렉토리 조작
		 * 	- 윈도우 탐색기로 하는 행동 -> 자바로 구현
		 * 	- 파일/디렉토리 정보 열람
		 * 	- 생성, 수정, 삭제, 이동 등
		 * 
		 * 2. 파일 입출력
		 * 
		 */
		
		m1();
		//m2();
		//m3();
		//m4();
		//m5();
		//m6();
		//m7();
		//m7_1();
		//m8();
		//m9();
		//m10();
		//m11();
		//m12();
		//m12_1();
		//m13();
		//m14();
		
	}
	//===================================================================================================================
	private static void m1() {
		
		// 자바 프로그램 -> (접근) -> 외부 파일
		//	1. 외부 파일을 참조하는 객체를 생성 -> 중계인(대리인)
		// 	2. 참조 객체 조작 -> 실제 파일에 적용
		
		// 파일 경로
		String path = "C:\\class\\code\\java\\file\\data.txt";
		
		// 파일 참조 객체 -> java.io.File 클래스
		File file = new File(path);
		
		// 파일 경로가 잘 되었는지 확인
		System.out.println(file.exists());
		
		if(file.exists()) {
			System.out.println("getName : "+file.getName());					// 파일의 이름
			System.out.println("isFile : "+file.isFile());						// 파일인가??
			System.out.println("isDirectory : "+file.isDirectory());			// 디렉토리인가??
			System.out.println("length : "+file.length());						// 파일크기
			System.out.println("getAbsolutePath : "+file.getAbsolutePath());	// 경로
			
			System.out.println("lastModified : "+file.lastModified());			// 수정한 날짜
			Calendar c1 = Calendar.getInstance();
			c1.setTimeInMillis(file.lastModified());
			System.out.printf("%tF %tT\n",c1,c1);
			
			System.out.println("isHidden : "+file.isHidden());					// 숨긴 파일인가??
			System.out.println("canRead : "+file.canRead());					// 읽을 수 있는 파일인가??
			System.out.println("canWrite : "+file.canWrite());					// 쓸수 있는 파일인가??
			System.out.println("getParent : "+file.getParent());				// 파일이 들어있는 폴더 경로
		} else {
			System.out.println("파일이 없습니다");
		}
	}
	//===================================================================================================================
	private static void m2() {
		
		// *** 폴더는 파일이다 ***

		String path = "C:\\class\\code\\java\\file";
		
		// 폴더 참조 객체
		File dir = new File(path);
		if(dir.exists()) {
			System.out.println("getName : "+dir.getName());						// 이름
			System.out.println("isFile : "+dir.isFile());						// 파일인가??
			System.out.println("isDirectory : "+dir.isDirectory());				// 디렉토리(파일)인가??
			System.out.println("length : "+dir.length());						// 파일크기	// 무조건 폴더의 크기는 0 ***(보통 보이는 폴더의 크기는 폴더안 파일들의 무게를 합한것. 폴더는 0)
			System.out.println("getAbsolutePath : "+dir.getAbsolutePath());		// 경로
			System.out.println("lastModified : "+dir.lastModified());			// 수정한 날짜
			System.out.println("isHidden : "+dir.isHidden());					// 숨긴 파일인가??
			System.out.println("canRead : "+dir.canRead());						// 읽을 수 있는 파일인가??
			System.out.println("canWrite : "+dir.canWrite());					// 쓸수 있는 파일인가??
			System.out.println("getParent : "+dir.getParent());					// 파일이 들어있는 폴더 경로
		} else {
			System.out.println("파일이 없습니다");
		}	
	}
	//===================================================================================================================
	private static void m3() {
		
		// 파일 조작 -> 생성, 복사(지금안함), 이동, 파일명 수정, 삭제 등
		
		// 생성
		String path = "C:\\class\\code\\java\\file\\score.txt";
		
		File file = new File(path);
		
		try {
			// 기존에 동일파일이 있으면 동작 안함
			System.out.println(file.createNewFile());	// 만들었을시 true, 기존에 있어서 안만들었을시 false
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//===================================================================================================================
	private static void m4() {
		
		// 파일명 수정
		String path = "C:\\class\\code\\java\\file\\score.txt";
		String path2 = "C:\\class\\code\\java\\file\\jumsu.txt";
		
		File file = new File(path);
		File file2 = new File(path2);
		
		System.out.println(file.renameTo(file2));
	}
	//===================================================================================================================
	private static void m5() {
		
		// 파일명 수정
		String path = "C:\\class\\code\\java\\file\\score.txt";
		String path2 = "C:\\class\\dev\\score.txt";
				
		File file = new File(path);
		File file2 = new File(path2);
				
		System.out.println(file.renameTo(file2));
	}
	//===================================================================================================================
	private static void m6() {
		
		// 파일 삭제
		String path = "C:\\class\\code\\java\\file\\data.txt";
		File file = new File(path);
		
		// 보통 삭제: 휴지통
		// 진짜 삭제: 복구 불가능
		System.out.println(file.delete());
	}
	//===================================================================================================================
	private static void m7() {
		
		// 폴더 조작
		String path = "C:\\class\\code\\java\\file\\aaa";
		File dir = new File(path);
		
		System.out.println(dir.mkdir());
	}
	//===================================================================================================================
	private static void m7_1() {
		
		// 다중 폴더 조작
		String path = "C:\\class\\code\\java\\file\\aaa\\bbb\\ccc\\ddd";
		File dir = new File(path);
		
		System.out.println(dir.mkdirs());
	}
	//===================================================================================================================
	private static void m8() {
		
		//요구사항 ] 회원정보 -> 회원명으로 개인 폴더 생성
		String[]member = {"홍길동","아무개","강아지","고양이","병아리"};
		
		for(int i=0;i<member.length;i++) {
			String path = "C:\\class\\code\\java\\file\\회원\\"+member[i];
			File dir = new File(path);
			System.out.println(dir.mkdir());
		}
	}
	//===================================================================================================================
	private static void m9() {
		
		// 요구사항] 일정관리 -> 날짜별 폴더 생성 -> 2024-01-01 ~ 2024-12-31
		//	- 폴더 366개 생성
		
		Calendar c = Calendar.getInstance();
		c.set(2024, 0, 1);
		
		System.out.println(c.getActualMaximum(Calendar.DAY_OF_YEAR));
		
		for(int i =0; i<c.getActualMaximum(Calendar.DAY_OF_YEAR);i++) {
			String path = String.format("C:\\class\\code\\java\\file\\일정\\%tF",c);
			File dir = new File(path);
			dir.mkdir();
			
			System.out.printf("%tF\n",c);
			c.add(Calendar.DATE, 1);
		}
	}
	//===================================================================================================================
	private static void m10() {
		
		// 폴더명 수정 or 폴더 이동
		//	- renameTo
		String path = "C:\\class\\code\\java\\file\\member";
		String path2 = "C:\\class\\dev\\member";
		
		File dir = new File(path);
		File dir2 = new File(path2);
		
		System.out.println(dir.renameTo(dir2));
	}
	//===================================================================================================================
	private static void m11() {
		
		// 폴더 삭제
		String path = "C:\\class\\code\\java\\file\\aaa";
		File dir = new File(path);
		
		System.out.println(dir.delete());	// 폴더 안에 내용물이 있을 경우 안에 내용물들을 전부 지워야 가능
	}
	//===================================================================================================================
	private static void m12() {
		
		// 특정 폴더 -> 내용물 열람(파일, 자식폴더)
		String path = "C:\\class\\dev\\eclipse";	// 파일 + 폴더
		File dir = new File(path);
		
		if(dir.exists()) {
			// 1. dir.list()
			// 2. dir.listFile()
			
			String[] list = dir.list();
			
			for(String item:list) {
				// 가져온 item이 폴더? 파일?
				System.out.println(item);
				File subFile = new File(path+"\\"+item);
				System.out.println(subFile.isFile()+"\n");
			}
		} else {
			System.out.println("폴더가 없습니다");
		}
	}
	//===================================================================================================================
	private static void m12_1() {
			
		// 특정 폴더 -> 내용물 열람(파일, 자식폴더)
		String path = "C:\\class\\dev\\eclipse";	// 파일 + 폴더
		File dir = new File(path);
			
		File[] list = dir.listFiles();
		
		for(File item:list) {
			if (item.isDirectory()) {
				System.out.printf("📁 : %s\n",item.getName());
			}
		}
		for (File item:list) {
			if(item.isFile()) {
				System.out.printf("폴더 : %s\n",item.getName());
			}
		}
	}
	//===================================================================================================================
	private static void m13() {
		
		// 폴더 크기?? -> 재귀 구조
		String path = "C:\\class\\code\\java\\file";
		File dir = new File(path);
		
		int count = 0;	// 파일개수
		
		if(dir.exists()) {
			File[]list = dir.listFiles();					// 부모 폴더
			for(File file:list) {
				if(file.isFile()) {
				count ++;
				}
			}
			for(File subdir : list) {
				if(subdir.isDirectory()) {
					// 자식 폴더 내용
					File[] sublist = subdir.listFiles();	// 자식 폴더
					for(File subfile:sublist) {
						if(subfile.isFile()) {
							count ++;
						}
					}
					for(File subsubdir:sublist) {
						if(subsubdir.isDirectory()) {
							
							// 자식의 자식 폴더
							File[]subsublist = subsubdir.listFiles();
							
							for(File subsubfile : subsublist) {
								if(subsubfile.isFile()) {
									count++;
								}
							}
						}
					}
				}
			}
			
			System.out.printf("파일 개수: %d개\n",count);
		}
	}
	//===================================================================================================================
	private static void m14() {
		
		// 폴더 -> 크기??
		// 	1. 크기 -> 751MB (787,983,361 바이트)
		// 	2. 내용 -> 파일 11,563, 폴더 2,413
		String path = "C:\\class\\dev\\eclipse";
		File dir = new File(path);
		
		if(dir.exists()) {
			count(dir);
			System.out.printf("총 파일 개수 : %,d개\n",fileCount);
			System.out.printf("총 폴더 개수 : %,d개\n",dirCount);
			System.out.printf("폴더 크기 : %,dMB\n",dirSize/1024/1024);
		}
	}
	
	public static void count(File dir) {
		File[] list = dir.listFiles();
		for(File file:list) {
			if(file.isFile()) {
				fileCount++;
				dirSize += file.length();
			}
		}
		for(File subdir:list) {
			if(subdir.isDirectory()) {
				dirCount++;
				count(subdir);
			}
		}
	}
}
