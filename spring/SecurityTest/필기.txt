Spring Security
- 스프링 보안 > 인증, 허가
- JSP/Servlet > 세션(or 쿠키)를 사용한 인증 티켓 > 티켓 검사
- 서블릿 필터와 스프링 인터셉터를 사용해서 동작


1. 새 프로젝트

2. 스프링/자바 버전 변경하기
- pom.xml
	- <org.springframework-version>5.0.7.RELEASE</org.springframework-version>
	- <java-version>11</java-version>
	- <source>11</source>
	- <target>11</target>
	- 패키지 탐색기 > 우클릭 > Properties > Project Facets > Java > 11

3. 서블릿/JSP 버전 변경하기
- pom.xml
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>javax.servlet.jsp-api</artifactId>
		<version>2.3.3</version>
		<scope>provided</scope>
	</dependency>

4. jUnit
- pom.xml
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>

5. Lombok
- pom.xml
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	    <version>1.18.34</version>
	    <scope>provided</scope>
	</dependency>

6. MyBatis
- pom.xml
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.5.2</version>
	</dependency>
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>1.3.2</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-tx</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>	

- ojdbc6.jar 등록

7. 인코딩 필터 등록
- web.xml

	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<servlet-name>appServlet</servlet-name>
	</filter-mapping>

8. DB 설정 및 HikariCP 설정 및 MyBatis 설정
- pom.xml
	<dependency>
		<groupId>com.zaxxer</groupId>
		<artifactId>HikariCP</artifactId>
		<version>2.7.4</version>
	</dependency>
	
- root-context.xmlS
	- <bean> x 4개

- src/main/resources 
                     > "config" > "mybatis-config.xml"(복사)
                     
                     
9. Log4j
	9.1 pom.xml 의존성 추가
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
			<version>1.16</version>
		</dependency>
	9.2 src/main/resources > log4jdbc.log4j2.properties
	9.3 src/main/resources > log4j.xml 일부 수정
	9.4 root-context.xml > 일부 수정
	
10. MyBatis 추가 설정(인터페이스 매퍼 방식)
	- root-context.xml
		- 인터페이스 매퍼 스캔 설정
	- 인터페이스 매퍼
		- "com.test.security.mapper" > "SecurityMapper.java"(I)
	- XML
		- src/main/resources > "com" > "test" > "security"  > "mapper" > "SecurityMapper.xml"

11. 테스트
	- src/test/java > "com.test.security" > "DBTest.java"

12. 의존성 추가
- pom.xml
- 4개

13. 시큐리터 설정 파일(***)
- 경로 + 파일명 > 자유
- webapp > WEB-INF > spring > "security-context.xml"
- root-context.xml, servlet-context.xml과 동일한 스프링 설정 파일

14. 시큐리티 필터 등록
- web.xml

==================================기본 시큐리티 설정========================================


15. 실행
- 에러 발생
- security-context.xml > 설정
- 다시 실행

16. 시큐리티 테스트가 필요한 URI 설계
- "/index.do"	> 인증(O), 인증(X) > 모든 사용자 접근 가능
- "/member.do"	> 인증(O) > 인증받은 사용자(회원)만 접근 가능
- "/admin.do"	> 인증(O) > 인증받은 사용자 중 관리자 권한이 있는 사용자

17. 테스트 파일
- "com.test.security.controller" > "TestController.java"
- views > "index.jsp"
		> "member.jsp"
		> "admin.jsp"
- views > "inc" > "menu.jsp"
		
	
18. 스프링 시큐리티 구성 요소
- 인증(Authentication), 허가(Authorization)

18.1 AuthenticationManger
	- 인증 매니저
	- 인증을 담당
	- AuthenticationManger <-> ProviderManger <-> AuthenticationProvider
	
18.2 AuthenticationProvider
	- 인증 제공자
	- 실제 인증을 처리

18.3 UserCetailsService	
	- 사용자 정보 + 사용자 권한 > 관리
	- AuthenticationManger <-> ProviderManger <-> AuthenticationProvider <-> UserCetailsService	
	
19. 로그인, 로그아웃 > 인증 작업
- sercurity-context.xml > 수정
	- pattern: 접근하려는 URI
	- access: 허가 유무
- 다시 실행
	- /index.do
	- /member.do

20. 단순 로그인 처리
- /security/login 자동 생성 > 로그인 페이지 사용
- 계정 > XML 정의(security-context.xml) > 인 메모리 방식 > 운영(X), 테스트용(O)
- security-context.xml > 수정

*** 스프링 시큐리티에서는 username의 의미 > id와 동일
- 일반 시스템(id) == 스프링 시큐리티(username)

- 다시 실행 > 로그인 > /member.do 접근
	- There is no PasswordEncoder mapped for the id "null"
	- 스프링 시큐리티 4까지 PasswordEncoder 선택
	- 스프링 시큐리티 5부터 PasswordEncoder 필수!!
	- 우선 테스트를 위해서 임시로 PasswordEncoder를 무시하게 설정
	
- Forbidden : 403 에러 > 권한이 없어서 뜨는 에러!

- 로그아웃
	- 개발자 도구 > Application > Cookies > JESSIONID 삭제
	
21. 접근 권한 페이지 처리
- 로그인을 안한 상태에서 접근 불가능한 URI 접근 > 로그인 페이지로 이동
- 로그인을 한 상태에서 접근 불가능한 URI 접근 > Forbidden : 403 에러

- security-context.xml > 수정
21.1 access-denied-handler URI 지정
or
21.2 AccessDeniedHabdler 직접 구현

21.1
- 접근 권한 페이지 추가
	- com.test.security.controller > "AuthController.java"
	- views > "auth" > "accesserror.jsp"
	- security-context.xml > 수정
	- 다시 실행 > admin.do 접근 > 사용자 페이지 표시 확인
	
22.2
	- "com.test.security.auth" > "CustomAccessDeniedHandler.java"
	- security-context.xml > 수정

22. 커스텀 로그인 페이지
- 접근 제한 페이지 처럼 직접 만든 로그인 페이지를 지정할 수 있다.

- AuthController.java > URI 추가
- views > auth > "customLogin.jsp"
	- <form method="POST" action="/security/login">: POST + URI(예약)
	- <input name="username">, <input name="password">: name 속성(예약)

- security-context.xml > 수정

- 다시 실행 > 로그인	
	- http://localhost:8090/login > 더 이상 작동 X
	- http://localhost:8090/security.customlogin.do

- 위의 로그인 실패 원인 > CSRF(Cross-Site Request Forgery) 미설정
	- security-context.xml > 수정
		22.a CSRF 사용하지 않음
		22.b CSRF 사용함(기본값) > customlogin.jsp 수정

23. 로그인 성공 > 후속 동작 처리
- 로그인을 성공한 후에 특정한 동작을 하고 싶을 때 > Handler 구현
- com.test.security.auth > "CustomLoginSuccessHandler.java"
- security-context.xml > 수정
- 다시 실행 > 회원 or 관리자 > 잘 이동 되는지?

24. 로그아웃
- 로그인(/"login")의 예약된 URI처럼 로그아웃도 이미 구현된 예약 URI가 있다. >
"/logout"
- 커스텀 핸들러 구현
- AuthController.java > URI 추가
- views > auth > "customlogout.jsp"
- security-context.xml > 수정 
- 다시 실행


25. 계정 정보
- InMemoryUserDetailsManger 방식
	- <security:user name="hong" password="{noop}1111" authorities="ROLE_MEMBER"/>
	
- JDBC 기반 계정 정보로 전환
	- 미리 정해진 구조의 스키마 사용 > 테이블 DDL 제공 > 편함 + 제약
	- 사용자가 직접 만든 스키마 사용 > 직접 DDL 생성

- SecurityTest > "script.sql"


26. 미리 정해진 구조의 스키마 사용
- script.sql > DDL 작성
- security-context.xml > JDBC 기반 인증 > 수정
- 다시 실행 > There is no PasswordEncoder mapped for the id "null" 오류

27. PasswordEncoder 문제 해결
- 스프링 시큐리티 5부터 passwordEncoder 사용 필수
- 이전 작업에서 임시로 '{noop}'로 붙여서 문제 잠시 무시
- DB 기반의 인증을 하려면 PasswordEncoder를 반드시 사용해야 한다.

- com.test.security.auth > "CustomNoOpPasswordEncoder.java"
	- DB 연동을 확인하기 위해 임시로 사용하는 PasswordEncoder이다.(실제 사용X)







	